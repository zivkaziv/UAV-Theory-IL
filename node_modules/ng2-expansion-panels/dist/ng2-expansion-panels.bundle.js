(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@angular/core"), require("@angular/common"));
	else if(typeof define === 'function' && define.amd)
		define(["@angular/core", "@angular/common"], factory);
	else if(typeof exports === 'object')
		exports["ng2-expansion-panels"] = factory(require("@angular/core"), require("@angular/common"));
	else
		root["ng2-expansion-panels"] = factory(root["@angular/core"], root["@angular/common"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var common_1 = __webpack_require__(2);
	var expansion_panel_1 = __webpack_require__(3);
	var expansion_panels_container_1 = __webpack_require__(5);
	var components = [
	    expansion_panels_container_1.ExpansionPanelsContainerComponent,
	    expansion_panel_1.ExpansionPanelComponent,
	    expansion_panel_1.ExpansionPanelTitle,
	    expansion_panel_1.ExpansionPanelContent,
	    expansion_panel_1.ExpansionPanelDescriptionToggled,
	    expansion_panel_1.ExpansionPanelDescriptionHidden,
	    expansion_panel_1.ExpansionPanelButtons
	];
	var ExpansionPanelsModule = (function () {
	    function ExpansionPanelsModule() {
	    }
	    ExpansionPanelsModule = __decorate([
	        core_1.NgModule({
	            imports: [common_1.CommonModule],
	            declarations: components,
	            exports: components,
	            schemas: [core_1.CUSTOM_ELEMENTS_SCHEMA]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], ExpansionPanelsModule);
	    return ExpansionPanelsModule;
	}());
	exports.ExpansionPanelsModule = ExpansionPanelsModule;
	

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(4));
	var directives_1 = __webpack_require__(16);
	exports.ExpansionPanelTitle = directives_1.ExpansionPanelTitle;
	exports.ExpansionPanelContent = directives_1.ExpansionPanelContent;
	exports.ExpansionPanelDescriptionHidden = directives_1.ExpansionPanelDescriptionHidden;
	exports.ExpansionPanelDescriptionToggled = directives_1.ExpansionPanelDescriptionToggled;
	exports.ExpansionPanelButtons = directives_1.ExpansionPanelButtons;
	

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var expansion_panels_container_1 = __webpack_require__(5);
	var ExpansionPanelComponent = (function () {
	    function ExpansionPanelComponent(container) {
	        this.container = container;
	        this.onOpen = new core_1.EventEmitter();
	        this.onClose = new core_1.EventEmitter();
	        this.onCancel = new core_1.EventEmitter();
	        this.onSubmit = new core_1.EventEmitter();
	    }
	    ExpansionPanelComponent.prototype.toggle = function () {
	        (this.isToggled) ? this.unselect() : this.select();
	    };
	    Object.defineProperty(ExpansionPanelComponent.prototype, "isToggled", {
	        get: function () {
	            return this.container.selectedPanel === this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ExpansionPanelComponent.prototype.submit = function () {
	        this.unselect();
	        this.onSubmit.emit();
	    };
	    ExpansionPanelComponent.prototype.cancel = function () {
	        this.unselect();
	        this.onCancel.emit();
	    };
	    ExpansionPanelComponent.prototype.select = function () {
	        this.container.selectedPanel = this;
	        this.onOpen.emit(this);
	    };
	    ExpansionPanelComponent.prototype.unselect = function () {
	        this.container.selectedPanel = undefined;
	        this.onClose.emit(this);
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ExpansionPanelComponent.prototype, "onOpen", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ExpansionPanelComponent.prototype, "onClose", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ExpansionPanelComponent.prototype, "onCancel", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ExpansionPanelComponent.prototype, "onSubmit", void 0);
	    ExpansionPanelComponent = __decorate([
	        core_1.Component({
	            selector: 'expansion-panel',
	            styles: [__webpack_require__(12).toString()],
	            template: __webpack_require__(15)
	        }), 
	        __metadata('design:paramtypes', [expansion_panels_container_1.ExpansionPanelsContainerComponent])
	    ], ExpansionPanelComponent);
	    return ExpansionPanelComponent;
	}());
	exports.ExpansionPanelComponent = ExpansionPanelComponent;
	

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(6));
	

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var ExpansionPanelsContainerComponent = (function () {
	    function ExpansionPanelsContainerComponent() {
	    }
	    ExpansionPanelsContainerComponent = __decorate([
	        core_1.Component({
	            selector: 'expansion-panels-container',
	            styles: [__webpack_require__(7).toString()],
	            template: __webpack_require__(11)
	        }), 
	        __metadata('design:paramtypes', [])
	    ], ExpansionPanelsContainerComponent);
	    return ExpansionPanelsContainerComponent;
	}());
	exports.ExpansionPanelsContainerComponent = ExpansionPanelsContainerComponent;
	

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(8);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(10)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/postcss-loader/index.js!./../../../node_modules/sass-loader/index.js!./expansion-panels-container.style.scss", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/postcss-loader/index.js!./../../../node_modules/sass-loader/index.js!./expansion-panels-container.style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(9)();
	// imports


	// module
	exports.push([module.id, "expansion-panels-container {\n  display: block; }\n", ""]);

	// exports


/***/ },
/* 9 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(true) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = "<div class=\"expansion-panels-container\">\n    <ng-content></ng-content>\n</div>\n";

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(13);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(10)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/postcss-loader/index.js!./../../../node_modules/sass-loader/index.js!./expansion-panel.style.scss", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/postcss-loader/index.js!./../../../node_modules/sass-loader/index.js!./expansion-panel.style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(9)();
	// imports


	// module
	exports.push([module.id, ".layout-row {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row; }\n\n.layout-column {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column; }\n\n.expansion-panel {\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  margin: 0;\n  box-shadow: 1px 1px 2px 1px rgba(0, 0, 0, 0.2);\n  color: #212121;\n  -webkit-transition: all 0.3s;\n  transition: all 0.3s;\n  font-size: inherit;\n  line-height: 1.5;\n  background: #fff; }\n\n.expansion-panel__header {\n  padding: 14px 18px;\n  cursor: pointer;\n  outline: 0; }\n\nexpansion-panel:first-child .expansion-panel:not(.expansion-panel--toggled) {\n  border-top-right-radius: 1px;\n  border-top-left-radius: 1px; }\n\nexpansion-panel:last-child .expansion-panel:not(.expansion-panel--toggled) {\n  border-bottom-right-radius: 1px;\n  border-bottom-left-radius: 1px; }\n\n.expansion-panel--toggled {\n  margin: 0.8em 0;\n  border-radius: 1px; }\n\n.expansion-panel__header:hover, .expansion-panel__header:focus {\n  background: #f9f9f9; }\n\n.expansion-panel__title {\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 25%;\n          flex: 1 1 25%; }\n\n.expansion-panel__description {\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 70%;\n          flex: 1 1 70%;\n  color: #727272; }\n\n.expansion-panel__content {\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 100%;\n          flex: 1 1 100%;\n  margin-left: 25%;\n  background: #fff;\n  padding: 14px 10px;\n  outline: 0; }\n\n.expansion-panel__arrow-down {\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 5%;\n          flex: 1 1 5%;\n  -webkit-box-align: end;\n      -ms-flex-align: end;\n              -ms-grid-row-align: flex-end;\n          align-items: flex-end; }\n\n.expansion-panel__arrow-down span {\n  background: url(" + __webpack_require__(14) + ");\n  -webkit-transition: -webkit-transform 0.2s;\n  transition: -webkit-transform 0.2s;\n  transition: transform 0.2s;\n  transition: transform 0.2s, -webkit-transform 0.2s;\n  width: 24px;\n  height: 24px; }\n\n.expansion-panel--toggled .expansion-panel__arrow-down span {\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg); }\n\n.expansion-panel__buttons {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: reverse;\n      -ms-flex-direction: row-reverse;\n          flex-direction: row-reverse; }\n", ""]);

	// exports


/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = "\"data:image/svg+xml;charset=utf8,%3Csvg fill='%23000000' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath d='M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z'/%3E %3Cpath d='M0-.75h24v24H0z' fill='none'/%3E %3C/svg%3E\""

/***/ },
/* 15 */
/***/ function(module, exports) {

	module.exports = "<div class=\"expansion-panel\" [class.expansion-panel--toggled]=\"isToggled\">\n    <!-- PANEL HEADER -->\n    <div class=\"layout-row expansion-panel__header\"\n         [attr.tabindex]=\"0\"\n         (keyup.enter)=\"toggle()\"\n         (click)=\"toggle()\">\n\n        <!-- TITLE/NAME -->\n        <div class=\"expansion-panel__title layout-column\">\n            <ng-content select=\"expansion-panel-title\"></ng-content>\n        </div>\n\n        <!-- DESCRIPTION (PANEL VISIBLE) -->\n        <div class=\"expansion-panel__description layout-column\" *ngIf=\"isToggled\">\n            <ng-content select=\"expansion-panel-description-toggled\"></ng-content>\n        </div>\n\n        <!-- DESCRIPTION (PANEL HIDDEN) -->\n        <div class=\"expansion-panel__description layout-column\" *ngIf=\"isToggled === false\">\n            <ng-content select=\"expansion-panel-description-hidden\"></ng-content>\n        </div>\n\n        <!-- ARROW -->\n        <div class=\"expansion-panel__arrow-down layout-column\">\n            <span aria-label=\"Toggle panel\"></span>\n        </div>\n    </div>\n\n    <!-- PANEL CONTENT -->\n    <div class=\"expansion-panel__content\"\n         *ngIf=\"isToggled\"\n         [attr.tabindex]=\"-1\">\n\n        <ng-content select=\"expansion-panel-content\"></ng-content>\n\n        <!-- PANEL BUTTONS -->\n        <div class=\"expansion-panel__buttons\">\n            <ng-content select=\"expansion-panel-buttons\"></ng-content>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var ExpansionPanelTitle = (function () {
	    function ExpansionPanelTitle() {
	    }
	    ExpansionPanelTitle = __decorate([
	        core_1.Directive({ selector: 'expansion-panel-title' }), 
	        __metadata('design:paramtypes', [])
	    ], ExpansionPanelTitle);
	    return ExpansionPanelTitle;
	}());
	exports.ExpansionPanelTitle = ExpansionPanelTitle;
	var ExpansionPanelDescriptionToggled = (function () {
	    function ExpansionPanelDescriptionToggled() {
	    }
	    ExpansionPanelDescriptionToggled = __decorate([
	        core_1.Directive({ selector: 'expansion-panel-description-toggled' }), 
	        __metadata('design:paramtypes', [])
	    ], ExpansionPanelDescriptionToggled);
	    return ExpansionPanelDescriptionToggled;
	}());
	exports.ExpansionPanelDescriptionToggled = ExpansionPanelDescriptionToggled;
	var ExpansionPanelDescriptionHidden = (function () {
	    function ExpansionPanelDescriptionHidden() {
	    }
	    ExpansionPanelDescriptionHidden = __decorate([
	        core_1.Directive({ selector: 'expansion-panel-description-hidden' }), 
	        __metadata('design:paramtypes', [])
	    ], ExpansionPanelDescriptionHidden);
	    return ExpansionPanelDescriptionHidden;
	}());
	exports.ExpansionPanelDescriptionHidden = ExpansionPanelDescriptionHidden;
	var ExpansionPanelContent = (function () {
	    function ExpansionPanelContent() {
	    }
	    ExpansionPanelContent = __decorate([
	        core_1.Directive({ selector: 'expansion-panel-content' }), 
	        __metadata('design:paramtypes', [])
	    ], ExpansionPanelContent);
	    return ExpansionPanelContent;
	}());
	exports.ExpansionPanelContent = ExpansionPanelContent;
	var ExpansionPanelButtons = (function () {
	    function ExpansionPanelButtons() {
	    }
	    ExpansionPanelButtons = __decorate([
	        core_1.Directive({ selector: 'expansion-panel-buttons' }), 
	        __metadata('design:paramtypes', [])
	    ], ExpansionPanelButtons);
	    return ExpansionPanelButtons;
	}());
	exports.ExpansionPanelButtons = ExpansionPanelButtons;
	

/***/ }
/******/ ])
});
;
//# sourceMappingURL=ng2-expansion-panels.map