{"version":3,"sources":["../../client/app/services/authentication.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAQa,qBAAqB;gBAE9B,+BACY,MAAc,EACb,IAAU;oBADX,WAAM,GAAN,MAAM,CAAQ;oBACb,SAAI,GAAJ,IAAI,CAAM;gBAAI,CAAC;gBAE5B,sCAAM,GAAN;oBACI,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;oBACpC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oBACjC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACpC,CAAC;gBAED,qCAAK,GAAL,UAAM,IAAU;oBAAhB,iBAmBC;oBAlBG,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,wBAAc,EAAE,CAAC;yBAC/D,SAAS,CACV,UAAA,QAAQ;wBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;4BACrD,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;4BACxE,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;4BACrE,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBACxC,CAAC;wBAAA,IAAI,CAAC,CAAC;4BACH,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC1D,CAAC;oBACL,CAAC,EACD,UAAA,KAAK;wBACD,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;wBACpB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;wBAC1B,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC,CAAC,CAAC;oBACP,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,0CAAU,GAAV;oBACI,EAAE,CAAC,CAAC,iCAAe,EAAE,CAAC,CAAC,CAAC;wBACpB,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;oBAAA,IAAI,CAAC,CAAC;wBACH,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC;gBACL,CAAC;gBACL,4BAAC;YAAD,CAxCA,AAwCC,IAAA;YAxCY,qBAAqB;gBADjC,iBAAU,EAAE;iDAIW,eAAM;oBACP,WAAI;eAJd,qBAAqB,CAwCjC;;QAAA,CAAC","file":"authentication.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Http } from '@angular/http';\nimport { contentHeaders } from '../common/headers';\nimport { User } from '../models/user.model';\nimport { tokenNotExpired } from 'angular2-jwt/angular2-jwt.js';\n\n@Injectable()\nexport class AuthenticationService {\n\n    constructor(\n        private router: Router,\n         private http: Http) { }\n\n    logout() {\n        localStorage.removeItem(\"id_token\");\n        localStorage.removeItem(\"email\");\n        this.router.navigate(['login']);\n    }\n\n    login(user: User) {\n        let body = JSON.stringify(user);\n        this.http.post('/api/auth/login', body, { headers: contentHeaders })\n            .subscribe(\n            response => {\n                if (JSON.stringify(response.json().success) === \"true\") {\n                    localStorage.setItem('id_token', JSON.stringify(response.json().token));\n                    localStorage.setItem('email', JSON.stringify(response.json().email));\n                    this.router.navigate(['dashboard']);\n                }else {\n                    window.alert(JSON.stringify(response.json().message));\n                }\n            },\n            error => {\n                alert(error.text());\n                console.log(error.text());\n                return false;\n            });\n        return true;\n    }\n\n    isLoggedin() {\n        if (tokenNotExpired()) {\n            return true;\n        }else {\n            return false;\n        }\n    }\n}"]}